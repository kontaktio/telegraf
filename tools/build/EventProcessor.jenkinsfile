#!groovy

node {

    currentBuild.result = "SUCCESS"

    try {
        def appVersion = ''
        stage('Version Select') {
            timeout(time: 10, unit: 'MINUTES') {
                appVersion = input(
                        id: 'appVersion', message: 'Enter a telegraf build app version:?',
                        parameters: [
                                [$class: 'StringParameterDefinition', defaultValue: 'None', description: 'App version', name: 'appVersionString'],
                        ]
                )
                echo "Build version: ${appVersion}"
            }
        }

        if (env.BRANCH_NAME == 'master') {

            stage('[Accept] Update service') {
                updateAcceptEscTaskAndService(appVersion)
            }
            stage('[Prod] Update service') {
                timeout(time: 30, unit: 'MINUTES') {
                    input(message: 'Proceed to production?')
                    updateProdEscTaskAndService(appVersion)
                    updateOfficeProdEscTaskAndService(appVersion)
                }
            }

        } else {
            stage('[Test] Update service') {
                updateTestEscTaskAndService(appVersion)
            }
        }
    }
    catch (err) {
        currentBuild.result = "ERROR"
        throw err
    }
}

def updateTestEscTaskAndService(appVersion) {
    sh 'eval $(aws ecr get-login --region us-east-1 --no-include-email)'
    sh "aws s3 cp s3://kontakt-telegraf-config/build-test/event-processor-test-taskdef.json ."
    sh "sed -i 's/VERSION_TAG/${appVersion}/g' event-processor-test-taskdef.json"
    def registerTask = readJSON text: sh(
            script: "aws ecs register-task-definition --cli-input-json file://event-processor-test-taskdef.json --region us-east-1",
            returnStdout: true)
    sh "aws ecs update-service --cluster test-ecs-cluster --service telegraf-event-processor --region us-east-1 --force-new-deployment --task-definition ${registerTask.taskDefinition.taskDefinitionArn}"
}

def updateAcceptEscTaskAndService(appVersion) {
    sh 'eval $(aws ecr get-login --region us-east-1 --no-include-email)'
    sh "aws s3 cp s3://kontakt-telegraf-config/build-accept/event-processor-accept-taskdef.json ."
    sh "sed -i 's/VERSION_TAG/${appVersion}/g' event-processor-accept-taskdef.json"
    def registerTask = readJSON text: sh(
            script: "aws ecs register-task-definition --cli-input-json file://event-processor-accept-taskdef.json --region us-east-1",
            returnStdout: true)
    sh "aws ecs update-service --cluster accept-ecs-cluster --service telegraf-event-processor --region us-east-1 --force-new-deployment --task-definition ${registerTask.taskDefinition.taskDefinitionArn}"
}

def updateProdEscTaskAndService(appVersion) {
    sh 'eval $(aws ecr get-login --region eu-west-1 --no-include-email)'
    sh "aws s3 cp s3://kontakt-telegraf-config/build-prod/event-processor-prod-taskdef.json ."
    sh "sed -i 's/VERSION_TAG/${appVersion}/g' event-processor-prod-taskdef.json"
    def registerTask = readJSON text: sh(
            script: "aws ecs register-task-definition --cli-input-json file://event-processor-prod-taskdef.json --region eu-west-1",
            returnStdout: true)
    sh "aws ecs update-service --cluster prod-ecs-cluster --service telegraf-event-processor --region eu-west-1 --force-new-deployment --task-definition ${registerTask.taskDefinition.taskDefinitionArn}"
}


def updateOfficeProdEscTaskAndService(appVersion) {
    sh 'eval $(aws ecr get-login --region eu-west-1 --no-include-email)'
    sh "aws s3 cp s3://kontakt-telegraf-config/build-officeprod/event-processor-officeprod-taskdef.json ."
    sh "sed -i 's/VERSION_TAG/${appVersion}/g' event-processor-officeprod-taskdef.json"
    def registerTask = readJSON text: sh(
            script: "aws ecs register-task-definition --cli-input-json file://event-processor-officeprod-taskdef.json --region eu-west-1",
            returnStdout: true)
    sh "aws ecs update-service --cluster prod-ecs-cluster --service telegraf-event-processor-office --region eu-west-1 --force-new-deployment --task-definition ${registerTask.taskDefinition.taskDefinitionArn}"
}
